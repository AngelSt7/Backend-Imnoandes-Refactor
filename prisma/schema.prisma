generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//enums
enum AUTH_PROVIDERS {
  LOCAL
  GOOGLE
  FACEBOOK
}

enum PROPERTY_TYPE {
  SALE
  RENT
}

enum IMAGE_TYPE {
  MAIN
  GALLERY
}

enum CURRENCY {
  PEN
  USD
}

enum PROPERTY_CATEGORY {
  HOUSE
  APARTMENT
  LAND
  COMMERCIAL
  OFFICE
  WAREHOUSE
}

enum LOCATION {
  DEPARTMENT
  PROVINCE
  DISTRICT
}

// Modelos
model User {
  id           String         @id @default(uuid())
  name         String
  lastname     String
  email        String         @unique
  authProvider AUTH_PROVIDERS @default(LOCAL) @map("auth_provider")
  confirmed    Boolean        @default(false)
  birthDate    DateTime?      @map("birth_date")
  password     String?
  phone        String?        @unique
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")

  token    Token?
  property Property[]
  favorite Favorite[]

  @@map("users")
}

model Token {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  token     Int      @unique
  expiresAt DateTime @map("expires_at")

  user User @relation(fields: [userId], references: [id])

  @@map("tokens")
}

model Department {
  id         String  @id @default(uuid())
  department String
  slug       String?

  province Province[]
  district District[]
  location Location[]

  @@map("departments")
}

model Province {
  id           String @id @default(uuid())
  province     String @unique
  slug         String @unique
  departmentId String @map("department_id")

  department Department @relation(fields: [departmentId], references: [id])
  district   District[]

  location Location[]

  @@map("provinces")
}

model District {
  id           String @id @default(uuid())
  district     String
  slug         String
  provinceId   String @map("province_id")
  departmentId String @map("department_id")

  province   Province   @relation(fields: [provinceId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])
  location   Location[]

  @@map("districts")
}

model Service {
  id      String @id @default(uuid())
  service String
  slug    String

  serviceToProperty ServiceToProperty[]

  @@map("services")
}

model ServiceToProperty {
  id         String @id @default(uuid())
  propertyId String @map("property_id")
  serviceId  String @map("service_id")

  service  Service  @relation(fields: [serviceId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@map("services_to_properties")
}

model Image {
  id         String @id @default(uuid())
  propertyId String @map("property_id")
  publicId   String @unique
  url        String

  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  type      IMAGE_TYPE
  property  Property   @relation(fields: [propertyId], references: [id])

  @@map("images")
}

model Favorite {
  id         String @id @default(uuid())
  userId     String @map("user_id")
  propertyId String @map("property_id")

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@map("favorites")
}

model Property {
  id               String            @id @default(uuid())
  name             String            @unique
  slug             String
  propertyType     PROPERTY_TYPE     @map("property_type")
  currency         CURRENCY
  propertyCategory PROPERTY_CATEGORY @map("property_category")
  price            Float
  address          String
  description      String
  availability     Boolean           @default(true)
  userId           String            @map("user_id")
  phone            String
  yearBuilt        Int?              @map("year_built")
  latitude         Float
  longitude        Float
  extraInfo        String?           @map("extra_info")
  locationId       String

  residential ResidentialProperty?
  commercial  CommercialProperty?
  images      Image[]
  location    Location             @relation(fields: [locationId], references: [id])
  user        User                 @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  serviceToProperty ServiceToProperty[]
  favorite          Favorite[]

  @@map("properties")
}

model Location {
  id           String   @id @default(uuid())
  type         LOCATION
  departmentId String?  @map("department_id")
  provinceId   String?  @map("province_id")
  districtId   String?  @map("district_id")

  slug String

  department Department? @relation(fields: [departmentId], references: [id])
  district   District?   @relation(fields: [districtId], references: [id])
  province   Province?   @relation(fields: [provinceId], references: [id])
  property   Property[]

  @@map("location")
}

model ResidentialProperty {
  id         String  @id
  bedrooms   Int?
  bathrooms  Int?
  area       Float
  furnished  Boolean @default(false)
  hasTerrace Boolean @default(false) @map("has_terrace")

  property Property @relation(fields: [id], references: [id])

  @@map("residential_properties")
}

model CommercialProperty {
  id            String  @id
  floor         Int     @default(1)
  hasParking    Boolean @default(false) @map("has_parking")
  parkingSpaces Int?    @map("parking_spaces")

  property Property @relation(fields: [id], references: [id])

  @@map("commercial_properties")
}
