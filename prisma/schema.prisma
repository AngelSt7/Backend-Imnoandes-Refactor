generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//enums
enum AUTH_PROVIDERS {
  LOCAL
  GOOGLE
  FACEBOOK
}

enum PROPERTY_TYPE {
  SALE
  RENT
}

enum CURRENCY {
  PEN
  USD
}

enum PROPERTY_CATEGORY {
  HOUSE
  APARTMENT
  LAND
  COMMERCIAL
  OFFICE
  WAREHOUSE
}

// Modelos
model User {
  id           String         @id @default(uuid())
  name         String
  lastname     String
  email        String         @unique
  authProvider AUTH_PROVIDERS @default(LOCAL)
  confirmed    Boolean        @default(false)
  birthDate    DateTime?
  password     String?
  phone        String?        @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  token    Token?
  property Property[]
}

model Token {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     Int      @unique
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])
}

model Department {
  id         String @id @default(uuid())
  department String

  province Province[]
  district District[]
  Property Property[]
}

model Province {
  id           String @id @default(uuid())
  province     String @unique
  slug         String @unique
  departmentId String

  department Department @relation(fields: [departmentId], references: [id])
  district   District[]

  property Property[]
}

model District {
  id           String @id @default(uuid())
  district     String
  slug         String
  provinceId   String
  departmentId String

  province   Province   @relation(fields: [provinceId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])
  property   Property[]
}

model Service {
  id                String              @id @default(uuid())
  service           String
  slug              String
  // serviceToPropert
  serviceToProperty ServiceToProperty[]
}

model ServiceToProperty {
  id         String @id @default(uuid())
  propertyId String
  serviceId  String

  service  Service  @relation(fields: [serviceId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])
}

model ImagesGallery {
  id         String @id @default(uuid())
  propertyId String
  url        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  property Property @relation(fields: [propertyId], references: [id])
}

model MainImage {
  id       String   @id
  url      String
  property Property @relation(fields: [id], references: [id])
}

model Property {
  id                String            @id @default(uuid())
  name              String            @unique
  slug              String
  property_type     PROPERTY_TYPE
  currency          CURRENCY
  property_category PROPERTY_CATEGORY
  price             Float
  location          String
  description       String
  availability      Boolean           @default(true)
  userId            String
  districtId        String
  departmentId      String
  provinceId        String
  phone             String
  yearBuilt         Int?
  latitude          Float
  longitude         Float
  extraInfo         String?

  // Relaciones
  residential ResidentialProperty?
  commercial  CommercialProperty?
  mainImage   MainImage?

  user       User       @relation(fields: [userId], references: [id])
  district   District   @relation(fields: [districtId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])
  province   Province   @relation(fields: [provinceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  serviceToProperty ServiceToProperty[]
  imagesGallery     ImagesGallery[]
}

model ResidentialProperty {
  id         String  @id
  bedrooms   Int?
  bathrooms  Int?
  area       Float
  furnished  Boolean @default(false)
  hasTerrace Boolean @default(false)

  property Property @relation(fields: [id], references: [id])
}

model CommercialProperty {
  id            String  @id
  floor         Int     @default(1)
  hasParking    Boolean @default(false)
  parkingSpaces Int?    

  property Property @relation(fields: [id], references: [id])
}
